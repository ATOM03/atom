{"version":3,"sources":["components/Chat/Chat.js","components/Join/Join.js","components/InfoBar/InfoBar.js","components/Message/Message.js","components/Messages/Messages.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["socket","Join","useState","name","setName","room","setRoom","className","placeholder","onChange","event","target","value","onClick","preventDefault","to","type","InfoBar","href","Message","message","user","text","today","Date","isSentByCurrentUser","trimmendNam","trim","toLowerCase","getHours","getMinutes","Messages","messages","map","i","key","Input","setMessage","sendMessage","onKeyPress","Chat","location","setUsers","setMessages","ENDPOINT","useEffect","queryString","parse","search","io","emit","error","alert","on","users","console","log","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8fb7cb08.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport InfoBar from \"../InfoBar/InfoBar\";\n// import OnlineList from \"../OnlineList/OnlineList\";\nimport Messages from \"../Messages/Messages\";\nimport io from \"socket.io-client\";\nimport Input from \"../Input/Input\";\nimport \"./Chat.css\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const ENDPOINT = \"https://chat-app-atom1.herokuapp.com/\";\n\n  //for name and room dataa\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n    // console.log(socket);\n    setName(name);\n    setRoom(room);\n    // setNames([...names, name]);\n    // console.log(names);\n\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n\n  //for messages and no. of users in a room\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n  console.log(messages);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Chat;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./join.css\";\nconst Join = () => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  return (\n    <div className=\"outerContainerJoin\">\n      <div className=\"innerContainer\">\n        <h2>Welcome to Chatty-App</h2>\n        <input\n          placeholder=\"Name\"\n          onChange={(event) => setName(event.target.value)}\n        ></input>\n        <input\n          placeholder=\"Room\"\n          onChange={(event) => setRoom(event.target.value)}\n        ></input>\n        <Link\n          className=\"Link\"\n          onClick={(event) => (!name || !room ? event.preventDefault() : null)}\n          to={`/chat?name=${name}&room=${room}`}\n        >\n          <button type=\"submit\">Enter</button>\n        </Link>{\" \"}\n      </div>\n    </div>\n  );\n};\nexport default Join;\n","import React from \"react\";\nimport \"./InfoBar.css\";\nconst InfoBar = ({ room }) => (\n  <div className=\"OuterInfoBox\">\n    <div className=\"leftInforBox\">\n      <h3>{room}</h3>\n    </div>\n    <div className=\"rightInfoBox\">\n      <a href=\"/\" className=\"Back\">\n        Close[X]\n      </a>\n    </div>\n  </div>\n);\n\nexport default InfoBar;\n","import React from \"react\";\nimport \"./Message.css\";\n\nconst Message = ({ message: { user, text }, name }) => {\n  let today = new Date();\n  let isSentByCurrentUser = false;\n  const trimmendNam = name.trim().toLowerCase();\n  if (user === trimmendNam) {\n    isSentByCurrentUser = true;\n  }\n\n  return isSentByCurrentUser ? (\n    <div className=\"messageContainer justifyEnd\">\n      <p className=\"sentText pr-10\">{trimmendNam}</p>\n      <div className=\"messageBox backgroundBlue\">\n        <p className=\"messageText colorWhite\">\n          {text}\n          <span className=\"time\">\n            {\"  \"}\n            {today.getHours() + \":\" + today.getMinutes()}\n          </span>\n        </p>\n        <p></p>\n      </div>\n    </div>\n  ) : (\n    <div className=\"messageContainer justifyStart\">\n      <div className=\"messageBox backgroundLight\">\n        <p className=\"messageText coloDark\">\n          {text}\n          <span className=\"time\">\n            {\"  \"}\n            {today.getHours() + \":\" + today.getMinutes()}\n          </span>\n        </p>\n      </div>\n      <p className=\"sentText pl-10\">{user}</p>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport \"./Messages.css\";\nimport Message from \"../Message/Message.js\";\nconst Messages = ({ name, messages }) => {\n  return (\n    <ScrollToBottom className=\"messages\">\n      {messages.map((message, i) => (\n        <div key={i}>\n          <Message name={name} message={message} />\n        </div>\n      ))}\n    </ScrollToBottom>\n  );\n};\n\nexport default Messages;\n","import React from \"react\";\nimport \"./input.css\";\nconst Input = ({ message, setMessage, sendMessage }) => (\n  <form>\n    <input\n      className=\"input\"\n      type=\"text\"\n      placeholder=\"Type a Message...\"\n      value={message}\n      onChange={event => setMessage(event.target.value)}\n      onKeyPress={event => (event.key === \"Enter\" ? sendMessage(event) : null)}\n    />\n    <button className=\"sendButton\" onClick={event => sendMessage(event)}>\n      Send\n    </button>\n  </form>\n);\nexport default Input;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Join from \"./components/Join/Join\";\nimport Chat from \"./components/Chat/Chat\";\nimport \"./index.css\";\n\nconst App = () => (\n  <Router>\n    <Route path=\"/\" exact component={Join} />\n    <Route path=\"/chat\" component={Chat} />\n  </Router>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}